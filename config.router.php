<?php
//Define interface class for router
use \Psr\Http\Message\ServerRequestInterface as Request;        //PSR7 ServerRequestInterface   >> Each router file must contains this
use \Psr\Http\Message\ResponseInterface as Response;            //PSR7 ResponseInterface        >> Each router file must contains this

//Define your modules class
use \modules\cargoagent\Config as Config;                       //Your main modules class

//Define additional class for any purpose
use \classes\middleware\ValidateParam as ValidateParam;         //ValidateParam                 >> To validate the body form request  
use \classes\middleware\ValidateParamURL as ValidateParamURL;   //ValidateParamURL              >> To validate the query parameter url
use \classes\middleware\ApiKey as ApiKey;                       //ApiKey Middleware             >> To authorize request by using ApiKey generated by reSlim
use \classes\SimpleCache as SimpleCache;                        //SimpleCache class             >> To cache response ouput server side


    //Config======================================================


    // POST api to add new config
    $app->post('/cargoagent/config/add', function (Request $request, Response $response) {
        $cf = new Config($this->db);
        $cf->lang = (empty($_GET['lang'])?$this->settings['language']:$_GET['lang']);
        $datapost = $request->getParsedBody();
        $cf->username = $datapost['Username'];
        $cf->token = $datapost['Token'];
        $cf->key = $datapost['Key'];
        $cf->value = $datapost['Value'];
        $cf->description = $datapost['Description'];
        $body = $response->getBody();
        $body->write($cf->add());
        return classes\Cors::modify($response,$body,200);
    })->add(new ValidateParam('Description','0-250'))
        ->add(new ValidateParam('Value','1-10000','required'))
        ->add(new ValidateParam('Token','1-250','required'))
        ->add(new ValidateParam(['Username','Key'],'1-50','required'));


    // POST api to update config
    $app->post('/cargoagent/config/update', function (Request $request, Response $response) {
        $cf = new Config($this->db);
        $cf->lang = (empty($_GET['lang'])?$this->settings['language']:$_GET['lang']);
        $datapost = $request->getParsedBody();    
        $cf->username = $datapost['Username'];
        $cf->token = $datapost['Token'];
        $cf->value = $datapost['Value'];
        $cf->description = $datapost['Description'];
        $cf->key = $datapost['Key'];
        $body = $response->getBody();
        $body->write($cf->update());
        return classes\Cors::modify($response,$body,200);
    })->add(new ValidateParam('Description','0-250'))
        ->add(new ValidateParam('Value','1-10000','required'))
        ->add(new ValidateParam('Token','1-250','required'))
        ->add(new ValidateParam(['Username','Key'],'1-50','required'));


    // POST api to delete config
    $app->post('/cargoagent/config/delete', function (Request $request, Response $response) {
        $cf = new Config($this->db);
        $cf->lang = (empty($_GET['lang'])?$this->settings['language']:$_GET['lang']);
        $datapost = $request->getParsedBody();    
        $cf->key = $datapost['Key'];
        $cf->username = $datapost['Username'];
        $cf->token = $datapost['Token'];
        $body = $response->getBody();
        $body->write($cf->delete());
        return classes\Cors::modify($response,$body,200);
    })->add(new ValidateParam('Token','1-250','required'))
        ->add(new ValidateParam(['Username','Key'],'1-50','required'));


    // GET api to show all data config (index) with pagination server side
    $app->get('/cargoagent/config/index/{username}/{token}/{page}/{itemsperpage}/', function (Request $request, Response $response) {
        $cf = new Config($this->db);
        $cf->lang = (empty($_GET['lang'])?$this->settings['language']:$_GET['lang']);
        $cf->search = filter_var((empty($_GET['query'])?'':$_GET['query']),FILTER_SANITIZE_STRING);
        $cf->username = $request->getAttribute('username');
        $cf->token = $request->getAttribute('token');
        $cf->page = $request->getAttribute('page');
        $cf->itemsPerPage = $request->getAttribute('itemsperpage');
        $body = $response->getBody();
        $body->write($cf->index());
        return classes\Cors::modify($response,$body,200);
    })->add(new ValidateParamURL('query'));


    // GET api to read single data
    $app->get('/cargoagent/config/read/{key}/{username}/{token}', function (Request $request, Response $response) {
        $cf = new Config($this->db);
        $cf->lang = (empty($_GET['lang'])?$this->settings['language']:$_GET['lang']);
        $cf->username = $request->getAttribute('username');
        $cf->token = $request->getAttribute('token');
        $cf->key = $request->getAttribute('key');
        $body = $response->getBody();
        $body->write($cf->read());
        return classes\Cors::modify($response,$body,200);
    });

    
    // GET api to read single data for public user (include cache)
    $app->map(['GET','OPTIONS'],'/cargoagent/config/read/{key}/', function (Request $request, Response $response) {
        $cf = new Config($this->db);
        $cf->lang = (empty($_GET['lang'])?$this->settings['language']:$_GET['lang']);
        $cf->key = $request->getAttribute('key');
        $body = $response->getBody();
        $response = $this->cache->withEtag($response, $this->etag.'-'.trim($_SERVER['REQUEST_URI'],'/'));
        if (SimpleCache::isCached(300,["apikey","lang"])){
            $datajson = SimpleCache::load(["apikey","lang"]);
        } else {
            $datajson = SimpleCache::save($cf->readPublic(),["apikey","lang"],null,300);
        }
        $body->write($datajson);
        return classes\Cors::modify($response,$body,200,$request);
    })->add(new ValidateParamURL('lang','0-2'))->add(new ApiKey);


    // GET api to test get value by key
    $app->get('/cargoagent/config/test/{key}', function (Request $request, Response $response) {
        $cf = new Config($this->db);
        $body = $response->getBody();
        $body->write('{"result":"'.$cf->get($request->getAttribute('key')).'"}');
        return classes\Cors::modify($response,$body,200);
    });